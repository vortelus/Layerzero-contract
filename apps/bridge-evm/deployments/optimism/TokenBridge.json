{
  "address": "0x86Bb63148d17d445Ed5398ef26Aa05Bf76dD5b59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_aptosChainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "EnableEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RegisterToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "aptosChainId",
          "type": "uint16"
        }
      ],
      "name": "SetAptosChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeBP",
          "type": "uint256"
        }
      ],
      "name": "SetBridgeBP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetGlobalPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "localChainId",
          "type": "uint16"
        }
      ],
      "name": "SetLocalChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "SetTokenPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "SetWETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTVL",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "accruedFeeLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aptosChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeFeeBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "enableEmergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ld2sdRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "quoteForSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendETHToAptos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            }
          ],
          "internalType": "struct LzLib.CallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendToAptos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_aptosChainId",
          "type": "uint16"
        }
      ],
      "name": "setAptosChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bridgeFeeBP",
          "type": "uint256"
        }
      ],
      "name": "setBridgeFeeBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setGlobalPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setTokenPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tvlSDs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_amountSD",
          "type": "uint64"
        }
      ],
      "name": "withdrawTVL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x086b4b94e2bf7f63d555b450869a1936e6b0aa09cc05fdfe70a2eb6746f6c67b",
  "receipt": {
    "to": null,
    "from": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
    "contractAddress": "0x86Bb63148d17d445Ed5398ef26Aa05Bf76dD5b59",
    "transactionIndex": 0,
    "gasUsed": "4211894",
    "logsBloom": "0x
    "blockHash": "0xb753a8911ca39efebceb6ace6740f620665e4c86ac687e4d5f05fb98063fd462",
    "transactionHash": "0x086b4b94e2bf7f63d555b450869a1936e6b0aa09cc05fdfe70a2eb6746f6c67b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30152899,
        "transactionHash": "0x086b4b94e2bf7f63d555b450869a1936e6b0aa09cc05fdfe70a2eb6746f6c67b",
        "address": "0x86Bb63148d17d445Ed5398ef26Aa05Bf76dD5b59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009f403140bc0574d7d36ea472b82daa1bbd4ef327"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb753a8911ca39efebceb6ace6740f620665e4c86ac687e4d5f05fb98063fd462"
      }
    ],
    "blockNumber": 30152899,
    "cumulativeGasUsed": "4211894",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c2269811836af69497E5F486A85D7316753cf62",
    108
  ],
  "numDeployments": 1,
  "solcInputHash": "de847171a7698ef623bdf198a254ebea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_aptosChainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"EnableEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RegisterToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"aptosChainId\",\"type\":\"uint16\"}],\"name\":\"SetAptosChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeBP\",\"type\":\"uint256\"}],\"name\":\"SetBridgeBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetGlobalPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"localChainId\",\"type\":\"uint16\"}],\"name\":\"SetLocalChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetTokenPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"SetWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"WithdrawTVL\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"accruedFeeLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aptosChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFeeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ld2sdRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"quoteForSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendETHToAptos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct LzLib.CallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendToAptos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_aptosChainId\",\"type\":\"uint16\"}],\"name\":\"setAptosChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bridgeFeeBP\",\"type\":\"uint256\"}],\"name\":\"setBridgeFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setGlobalPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setTokenPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvlSDs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_amountSD\",\"type\":\"uint64\"}],\"name\":\"withdrawTVL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenBridge.sol\":\"TokenBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/libraries/LzLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LzLib {\\n    // LayerZero communication\\n    struct CallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n\\n    struct AirdropParams {\\n        uint airdropAmount;\\n        bytes32 airdropAddress;\\n    }\\n\\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\\n        } else {\\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\\n        }\\n    }\\n\\n    // Build Adapter Params\\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\\n        // txType 1\\n        // bytes  [2       32      ]\\n        // fields [txType  extraGas]\\n        return abi.encodePacked(uint16(1), _uaGas);\\n    }\\n\\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\\n        require(_params.airdropAmount > 0, \\\"Airdrop amount must be greater than 0\\\");\\n        require(_params.airdropAddress != bytes32(0x0), \\\"Airdrop address must be set\\\");\\n\\n        // txType 2\\n        // bytes  [2       32        32            bytes[]         ]\\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\\n    }\\n\\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    // Decode Adapter Params\\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            txType := mload(add(_adapterParams, 2))\\n            uaGas := mload(add(_adapterParams, 34))\\n        }\\n        require(txType == 1 || txType == 2, \\\"Unsupported txType\\\");\\n        require(uaGas > 0, \\\"Gas too low\\\");\\n\\n        if (txType == 2) {\\n            assembly {\\n                airdropAmount := mload(add(_adapterParams, 66))\\n                airdropAddress := mload(add(_adapterParams, 86))\\n            }\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n    // TODO: testing\\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\\n        require(bytes12(_bytes32Address) == bytes12(0), \\\"Invalid address\\\"); // first 12 bytes should be empty\\n        return address(uint160(uint(_bytes32Address)));\\n    }\\n\\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n}\\n\",\"keccak256\":\"0xd533c5cdbe4c71e65a74677c96da49601612ac6dbff4372a859239a5c5e0a1da\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x9f057e6b7c9006828f7711122743dd068225d3d331989a6660a8f964b5977a1e\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x8da2c853945fbd9e3720975d33c6384f3f086a7f521a474953e78c3c87578e65\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/libraries/LzLib.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ITokenBridge.sol\\\";\\n\\ncontract TokenBridge is ITokenBridge, NonblockingLzApp, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint public constant BP_DENOMINATOR = 10000;\\n    uint8 public constant SHARED_DECIMALS = 6;\\n\\n    uint16 public aptosChainId;\\n\\n    uint public bridgeFeeBP;\\n\\n    mapping(address => uint64) public tvlSDs; // token address => tvl\\n    mapping(address => bool) public supportedTokens;\\n    mapping(address => bool) public pausedTokens; // token address => paused\\n    mapping(address => uint) public ld2sdRates; // token address => rate\\n    address public weth;\\n\\n    bool public useCustomAdapterParams;\\n    bool public globalPaused;\\n    bool public emergencyWithdrawEnabled;\\n    uint public emergencyWithdrawTime;\\n\\n    modifier whenNotPaused(address _token) {\\n        require(!globalPaused && !pausedTokens[_token], \\\"TokenBridge: paused\\\");\\n        _;\\n    }\\n\\n    modifier emergencyWithdrawUnlocked() {\\n        require(emergencyWithdrawEnabled && block.timestamp >= emergencyWithdrawTime, \\\"TokenBridge: emergency withdraw locked\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _layerZeroEndpoint,\\n        uint16 _aptosChainId\\n    ) NonblockingLzApp(_layerZeroEndpoint) {\\n        aptosChainId = _aptosChainId;\\n    }\\n\\n    function sendToAptos(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable override whenNotPaused(_token) nonReentrant {\\n        require(supportedTokens[_token], \\\"TokenBridge: token is not supported\\\");\\n\\n        // lock token\\n        _amountLD = _removeDust(_token, _amountLD);\\n        _amountLD = _lockTokenFrom(_token, msg.sender, _amountLD);\\n\\n        // add tvl\\n        uint64 amountSD = _LDtoSD(_token, _amountLD);\\n        require(amountSD > 0, \\\"TokenBridge: amountSD must be greater than 0\\\");\\n        tvlSDs[_token] += amountSD;\\n\\n        // send to aptos\\n        _sendToken(_token, _toAddress, amountSD, _callParams, _adapterParams, msg.value);\\n        emit Send(_token, msg.sender, _toAddress, _amountLD);\\n    }\\n\\n    function sendETHToAptos(\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable override whenNotPaused(weth) nonReentrant {\\n        address _weth = weth; // save gas\\n        require(_weth != address(0) && supportedTokens[_weth], \\\"TokenBridge: ETH is not supported\\\");\\n        _amountLD = _removeDust(_weth, _amountLD);\\n        require(_amountLD > 0, \\\"TokenBridge: amount must be greater than 0\\\");\\n        require(msg.value >= _amountLD, \\\"TokenBridge: fee not enough\\\");\\n\\n        // wrap eth and add tvl\\n        IWETH(_weth).deposit{value: _amountLD}();\\n        uint64 amountSD = _LDtoSD(_weth, _amountLD);\\n        tvlSDs[_weth] += amountSD;\\n\\n        // send to aptos\\n        _sendToken(_weth, _toAddress, amountSD, _callParams, _adapterParams, msg.value - _amountLD);\\n        emit Send(address(0), msg.sender, _toAddress, _amountLD);\\n    }\\n\\n    function quoteForSend(LzLib.CallParams calldata _callParams, bytes calldata _adapterParams)\\n        external\\n        view\\n        returns (uint nativeFee, uint zroFee)\\n    {\\n        _checkAdapterParams(_adapterParams);\\n        bytes memory payload = _encodeSendPayload(address(0), bytes32(0), 0);\\n        bool payInZRO = _callParams.zroPaymentAddress != address(0);\\n        return\\n            lzEndpoint.estimateFees(aptosChainId, address(this), payload, payInZRO, _adapterParams);\\n    }\\n\\n    // ---------------------- owner functions ----------------------\\n    function registerToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"TokenBridge: invalid token address\\\");\\n        require(!supportedTokens[_token], \\\"TokenBridge: token already registered\\\");\\n\\n        uint8 localDecimals = _tokenDecimals(_token);\\n        require(\\n            localDecimals >= SHARED_DECIMALS,\\n            \\\"TokenBridge: decimals must be >= SHARED_DECIMALS\\\"\\n        );\\n\\n        supportedTokens[_token] = true;\\n        ld2sdRates[_token] = 10**(localDecimals - SHARED_DECIMALS);\\n        emit RegisterToken(_token);\\n    }\\n\\n    function setBridgeFeeBP(uint _bridgeFeeBP) external onlyOwner {\\n        require(_bridgeFeeBP <= BP_DENOMINATOR, \\\"TokenBridge: bridge fee > 100%\\\");\\n        bridgeFeeBP = _bridgeFeeBP;\\n        emit SetBridgeBP(_bridgeFeeBP);\\n    }\\n\\n    function setWETH(address _weth) external onlyOwner {\\n        require(_weth != address(0), \\\"TokenBridge: invalid token address\\\");\\n        weth = _weth;\\n        emit SetWETH(_weth);\\n    }\\n\\n    function setGlobalPause(bool _paused) external onlyOwner {\\n        globalPaused = _paused;\\n        emit SetGlobalPause(_paused);\\n    }\\n\\n    function setTokenPause(address _token, bool _paused) external onlyOwner {\\n        pausedTokens[_token] = _paused;\\n        emit SetTokenPause(_token, _paused);\\n    }\\n\\n    function setAptosChainId(uint16 _aptosChainId) external onlyOwner {\\n        aptosChainId = _aptosChainId;\\n        emit SetAptosChainId(_aptosChainId);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function withdrawFee(\\n        address _token,\\n        address _to,\\n        uint _amountLD\\n    ) public onlyOwner {\\n        uint feeLD = accruedFeeLD(_token);\\n        require(_amountLD <= feeLD, \\\"TokenBridge: fee not enough\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amountLD);\\n        emit WithdrawFee(_token, _to, _amountLD);\\n    }\\n\\n    function withdrawTVL(\\n        address _token,\\n        address _to,\\n        uint64 _amountSD\\n    ) public onlyOwner emergencyWithdrawUnlocked {\\n        tvlSDs[_token] -= _amountSD;\\n\\n        uint amountLD = _SDtoLD(_token, _amountSD);\\n        IERC20(_token).safeTransfer(_to, amountLD);\\n        emit WithdrawTVL(_token, _to, amountLD);\\n    }\\n\\n    function withdrawEmergency(address _token, address _to) external onlyOwner {\\n        // modifier redundant for extra safety\\n        withdrawFee(_token, _to, accruedFeeLD(_token));\\n        withdrawTVL(_token, _to, tvlSDs[_token]);\\n    }\\n\\n    function enableEmergencyWithdraw(bool enabled) external onlyOwner {\\n        emergencyWithdrawEnabled = enabled;\\n        emergencyWithdrawTime = enabled ? block.timestamp + 1 weeks : 0; // overrides existing lock time\\n        emit EnableEmergencyWithdraw(enabled, emergencyWithdrawTime);\\n    }\\n\\n    // override the renounce ownership inherited by zeppelin ownable\\n    function renounceOwnership() public override onlyOwner {}\\n\\n    // receive ETH from WETH\\n    receive() external payable {}\\n\\n    function accruedFeeLD(address _token) public view returns (uint) {\\n        uint tvlLD = _SDtoLD(_token, tvlSDs[_token]);\\n        return IERC20(_token).balanceOf(address(this)) - tvlLD;\\n    }\\n\\n    // ---------------------- internal functions ----------------------\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory,\\n        uint64,\\n        bytes memory _payload\\n    ) internal override {\\n        require(_srcChainId == aptosChainId, \\\"TokenBridge: invalid source chain id\\\");\\n\\n        (address token, address to, uint64 amountSD, bool unwrap) = _decodeReceivePayload(_payload);\\n        require(!globalPaused && !pausedTokens[token], \\\"TokenBridge: paused\\\");\\n        require(supportedTokens[token], \\\"TokenBridge: token is not supported\\\");\\n\\n        // sub tvl\\n        uint64 tvlSD = tvlSDs[token];\\n        require(tvlSD >= amountSD, \\\"TokenBridge: insufficient liquidity\\\");\\n        tvlSDs[token] = tvlSD - amountSD;\\n\\n        // pay fee\\n        uint amountLD = _SDtoLD(token, amountSD);\\n        (amountLD, ) = bridgeFeeBP > 0 ? _payFee(amountLD) : (amountLD, 0);\\n\\n        // redeem token to receiver\\n        if (token == weth && unwrap) {\\n            _redeemETHTo(weth, payable(to), amountLD);\\n            emit Receive(address(0), to, amountLD);\\n        } else {\\n            to = to == address(0) ? address(0xdEaD) : to; // avoid failure in safeTransfer()\\n            IERC20(token).safeTransfer(to, amountLD);\\n            emit Receive(token, to, amountLD);\\n        }\\n    }\\n\\n    function _redeemETHTo(\\n        address _weth,\\n        address payable _to,\\n        uint _amountLD\\n    ) internal {\\n        IWETH(_weth).withdraw(_amountLD);\\n        _to.transfer(_amountLD);\\n    }\\n\\n    function _lockTokenFrom(\\n        address _token,\\n        address _from,\\n        uint _amountLD\\n    ) internal returns (uint) {\\n        // support token with transfer fee\\n        uint balanceBefore = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransferFrom(_from, address(this), _amountLD);\\n        uint balanceAfter = IERC20(_token).balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function _tokenDecimals(address _token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = _token.staticcall(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        require(success, \\\"TokenBridge: failed to get token decimals\\\");\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    function _payFee(uint _amountLD) internal view returns (uint amountAfterFee, uint fee) {\\n        fee = (_amountLD * bridgeFeeBP) / BP_DENOMINATOR;\\n        amountAfterFee = _amountLD - fee;\\n    }\\n\\n    function _sendToken(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint64 _amountSD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams,\\n        uint _fee\\n    ) internal {\\n        _checkAdapterParams(_adapterParams);\\n        bytes memory payload = _encodeSendPayload(_token, _toAddress, _amountSD);\\n        _lzSend(\\n            aptosChainId,\\n            payload,\\n            _callParams.refundAddress,\\n            _callParams.zroPaymentAddress,\\n            _adapterParams,\\n            _fee\\n        );\\n    }\\n\\n    // send payload: packet type(1) + remote token(32) + receiver(32) + amount(8)\\n    function _encodeSendPayload(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint64 _amountSD\\n    ) internal pure returns (bytes memory) {\\n        bytes32 tokenBytes32 = LzLib.addressToBytes32(_token);\\n        return\\n            abi.encodePacked(uint8(PacketType.SEND_TO_APTOS), tokenBytes32, _toAddress, _amountSD);\\n    }\\n\\n    // receive payload: packet type(1) + remote token(32) + receiver(32) + amount(8) + unwrap flag(1)\\n    function _decodeReceivePayload(bytes memory _payload)\\n        internal\\n        pure\\n        returns (\\n            address token,\\n            address to,\\n            uint64 amountSD,\\n            bool unwrap\\n        )\\n    {\\n        require(_payload.length == 74, \\\"TokenBridge: invalid payload length\\\");\\n        PacketType packetType = PacketType(uint8(_payload[0]));\\n        require(packetType == PacketType.RECEIVE_FROM_APTOS, \\\"TokenBridge: unknown packet type\\\");\\n        assembly {\\n            token := mload(add(_payload, 33))\\n            to := mload(add(_payload, 65))\\n            amountSD := mload(add(_payload, 73))\\n        }\\n        unwrap = uint8(_payload[73]) == 1;\\n    }\\n\\n    function _checkAdapterParams(bytes calldata _adapterParams) internal view {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(aptosChainId, uint16(PacketType.SEND_TO_APTOS), _adapterParams, 0);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"TokenBridge: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _SDtoLD(address _token, uint64 _amountSD) internal view returns (uint) {\\n        return _amountSD * ld2sdRates[_token];\\n    }\\n\\n    function _LDtoSD(address _token, uint _amountLD) internal view returns (uint64) {\\n        uint amountSD = _amountLD / ld2sdRates[_token];\\n        require(amountSD <= type(uint64).max, \\\"TokenBridge: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _removeDust(address _token, uint _amountLD) internal view returns (uint) {\\n        return _SDtoLD(_token, _LDtoSD(_token, _amountLD));\\n    }\\n}\\n\",\"keccak256\":\"0x715d2cf2082cfa3fb34a3bdf6715f2381aa89404dece723e46c28a345c3295fa\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/libraries/LzLib.sol\\\";\\n\\ninterface ITokenBridge {\\n    enum PacketType {\\n        SEND_TO_APTOS,\\n        RECEIVE_FROM_APTOS\\n    }\\n\\n    function sendToAptos(\\n        address _token,\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function sendETHToAptos(\\n        bytes32 _toAddress,\\n        uint _amountLD,\\n        LzLib.CallParams calldata _callParams,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function quoteForSend(LzLib.CallParams calldata _callParams, bytes calldata _adapterParams)\\n        external\\n        view\\n        returns (uint nativeFee, uint zroFee);\\n\\n    event Send(address indexed token, address indexed from, bytes32 indexed to, uint amountLD);\\n    event Receive(address indexed token, address indexed to, uint amountLD);\\n    event RegisterToken(address token);\\n    event SetBridgeBP(uint bridgeFeeBP);\\n    event SetWETH(address weth);\\n    event SetGlobalPause(bool paused);\\n    event SetTokenPause(address token, bool paused);\\n    event SetLocalChainId(uint16 localChainId);\\n    event SetAptosChainId(uint16 aptosChainId);\\n    event SetUseCustomAdapterParams(bool useCustomAdapterParams);\\n    event WithdrawFee(address indexed token, address to, uint amountLD);\\n    event WithdrawTVL(address indexed token, address to, uint amountLD);\\n    event EnableEmergencyWithdraw(bool enabled, uint unlockTime);\\n}\\n\",\"keccak256\":\"0x54e8b27b19675ea77525b2b67988770c66c045eac9a21fb2148bcb383f009826\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e07c9b17bb7377f1c0ea04e38e249dd8e940f35fb69d70d85035a981c7924d9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004b8738038062004b878339810160408190526200003491620000c0565b8180620000413362000070565b6001600160a01b03166080525060016005556006805461ffff191661ffff929092169190911790555062000110565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d457600080fd5b82516001600160a01b0381168114620000ec57600080fd5b602084015190925061ffff811681146200010557600080fd5b809150509250929050565b608051614a23620001646000396000818161081501528181610af201528181610d6c015281816110e00152818161121c015281816113160152818161219c0152818161273301526139b00152614a236000f3fe60806040526004361061032b5760003560e01c806393f26a4c116101a5578063cb8d3b1f116100ec578063e3179c3e11610095578063ed629c5c1161006f578063ed629c5c146109c3578063ee7a4596146109e4578063f2fde38b14610a14578063f5ecbdbc14610a3457600080fd5b8063e3179c3e14610933578063eab45d9c14610983578063eb8d72b7146109a357600080fd5b8063d71e409e116100c6578063d71e409e146108dd578063de9b9488146108fd578063df2a5b3b1461091357600080fd5b8063cb8d3b1f1461088a578063cbed8b9c146108aa578063d1deba1f146108ca57600080fd5b8063a6c3d1651161014e578063baf3292d11610128578063baf3292d14610837578063c21f511414610857578063ca23bb4c1461087757600080fd5b8063a6c3d165146107cd578063abe685cd146107ed578063b353aaa71461080357600080fd5b8063971679641161017f57806397167964146107665780639f38369a1461078d578063a2f27ae0146107ad57600080fd5b806393f26a4c14610706578063950c8a741461072657806395e2c1681461074657600080fd5b80635747e69f1161027457806369a6b3db1161021d57806376a9099a116101f757806376a9099a146106705780638cfd8f5c146106835780638da5cb5b146106bb57806392cc13c5146106d957600080fd5b806369a6b3db1461060e578063715018a61461062e5780637533d7881461064357600080fd5b806361a552dc1161024e57806361a552dc1461059d57806366ad5c8a146105be57806368c4ac26146105de57600080fd5b80635747e69f1461050d5780635b769f3c1461052e5780635b8c41e61461054e57600080fd5b806325a9f792116102d65780633fc8cef3116102b05780633fc8cef31461048057806342d65a8d146104b8578063468b9668146104d857600080fd5b806325a9f792146103f95780632db88ecf146104225780633d8b38f61461045057600080fd5b806309824a801161030757806309824a80146103995780631095b6d7146103b957806310ddb137146103d957600080fd5b80620d5900146103375780621d35671461035957806307e0db171461037957600080fd5b3661033257005b600080fd5b34801561034357600080fd5b50610357610352366004613c18565b610a54565b005b34801561036557600080fd5b50610357610374366004613ca9565b610aef565b34801561038557600080fd5b50610357610394366004613d3d565b610d32565b3480156103a557600080fd5b506103576103b4366004613d6d565b610dd4565b3480156103c557600080fd5b506103576103d4366004613d8a565b610fe0565b3480156103e557600080fd5b506103576103f4366004613d3d565b6110a6565b34801561040557600080fd5b5061040f60075481565b6040519081526020015b60405180910390f35b34801561042e57600080fd5b5060065461043d9061ffff1681565b60405161ffff9091168152602001610419565b34801561045c57600080fd5b5061047061046b366004613dcb565b611117565b6040519015158152602001610419565b34801561048c57600080fd5b50600c546104a0906001600160a01b031681565b6040516001600160a01b039091168152602001610419565b3480156104c457600080fd5b506103576104d3366004613dcb565b6111e4565b3480156104e457600080fd5b506104f86104f3366004613e36565b611283565b60408051928352602083019190915201610419565b34801561051957600080fd5b50600c5461047090600160b01b900460ff1681565b34801561053a57600080fd5b50610357610549366004613d6d565b6113aa565b34801561055a57600080fd5b5061040f610569366004613ee0565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156105a957600080fd5b50600c5461047090600160a81b900460ff1681565b3480156105ca57600080fd5b506103576105d9366004613ca9565b61146e565b3480156105ea57600080fd5b506104706105f9366004613d6d565b60096020526000908152604090205460ff1681565b34801561061a57600080fd5b50610357610629366004613f8f565b611561565b34801561063a57600080fd5b506103576115d1565b34801561064f57600080fd5b5061066361065e366004613d3d565b6115db565b6040516104199190614004565b61035761067e366004614017565b611675565b34801561068f57600080fd5b5061040f61069e366004614080565b600260209081526000928352604080842090915290825290205481565b3480156106c757600080fd5b506000546001600160a01b03166104a0565b3480156106e557600080fd5b5061040f6106f4366004613d6d565b600b6020526000908152604090205481565b34801561071257600080fd5b506103576107213660046140b3565b61192c565b34801561073257600080fd5b506003546104a0906001600160a01b031681565b34801561075257600080fd5b506103576107613660046140ec565b611976565b34801561077257600080fd5b5061077b600681565b60405160ff9091168152602001610419565b34801561079957600080fd5b506106636107a8366004613d3d565b611ac8565b3480156107b957600080fd5b5061040f6107c8366004613d6d565b611bd7565b3480156107d957600080fd5b506103576107e8366004613dcb565b611c7e565b3480156107f957600080fd5b5061040f61271081565b34801561080f57600080fd5b506104a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561084357600080fd5b50610357610852366004613d6d565b611d07565b34801561086357600080fd5b50610357610872366004613d3d565b611d6a565b61035761088536600461412a565b611db6565b34801561089657600080fd5b506103576108a5366004614193565b612100565b3480156108b657600080fd5b506103576108c53660046141c1565b612164565b6103576108d8366004613ca9565b612212565b3480156108e957600080fd5b506103576108f8366004613f8f565b612444565b34801561090957600080fd5b5061040f600d5481565b34801561091f57600080fd5b5061035761092e366004614213565b6124d5565b34801561093f57600080fd5b5061096a61094e366004613d6d565b60086020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610419565b34801561098f57600080fd5b5061035761099e366004613f8f565b61258f565b3480156109af57600080fd5b506103576109be366004613dcb565b6125ff565b3480156109cf57600080fd5b50600c5461047090600160a01b900460ff1681565b3480156109f057600080fd5b506104706109ff366004613d6d565b600a6020526000908152604090205460ff1681565b348015610a2057600080fd5b50610357610a2f366004613d6d565b612659565b348015610a4057600080fd5b50610663610a4f36600461424f565b6126e9565b610a5c6127b3565b612710811115610ab35760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a2062726964676520666565203e2031303025000060448201526064015b60405180910390fd5b60078190556040518181527f9a749c8193bfd56b2b2a05c0bd18fbb0f69801a3fd6576c40b90537fd0fc3854906020015b60405180910390a150565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b675760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c657200006044820152606401610aaa565b61ffff861660009081526001602052604081208054610b859061429c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb19061429c565b8015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b50505050509050805186869050148015610c19575060008151115b8015610c41575080516020820120604051610c3790889088906142d0565b6040518091039020145b610cb35760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610aaa565b610d298787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061280d92505050565b50505050505050565b610d3a6127b3565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610db957600080fd5b505af1158015610dcd573d6000803e3d6000fd5b5050505050565b610ddc6127b3565b6001600160a01b038116610e3d5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604482015261737360f01b6064820152608401610aaa565b6001600160a01b03811660009081526009602052604090205460ff1615610ecc5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a20746f6b656e20616c726561647920726567697360448201527f74657265640000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6000610ed782612930565b9050600660ff82161015610f535760405162461bcd60e51b815260206004820152603060248201527f546f6b656e4272696467653a20646563696d616c73206d757374206265203e3d60448201527f205348415245445f444543494d414c53000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0382166000908152600960205260409020805460ff19166001179055610f816006826142f6565b610f8c90600a6143fd565b6001600160a01b0383166000818152600b602090815260409182902093909355519081527ff7fe8023cb2e36bde1d59a88ac5763a8c11be6d25e6819f71bb7e23e5bf0dc1691015b60405180910390a15050565b610fe86127b3565b6000610ff384611bd7565b9050808211156110455760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610aaa565b6110596001600160a01b0385168484612a63565b604080516001600160a01b038581168252602082018590528616917ff15a0a3784dea9b4fe33bc98e2450745e262d310237b2868ea8ef56967ff3ecb91015b60405180910390a250505050565b6110ae6127b3565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610d9f565b61ffff8316600090815260016020526040812080548291906111389061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546111649061429c565b80156111b15780601f10611186576101008083540402835291602001916111b1565b820191906000526020600020905b81548152906001019060200180831161119457829003601f168201915b5050505050905083836040516111c89291906142d0565b60405180910390208180519060200120149150505b9392505050565b6111ec6127b3565b6040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061125590869086908690600401614435565b600060405180830381600087803b15801561126f57600080fd5b505af1158015610d29573d6000803e3d6000fd5b6000806112908484612afc565b6040805160006020820181905260218201819052604182018190526061820181905282518083036049018152606990920190925290506000806112d96040890160208a01613d6d565b6006546040517f40a7bb100000000000000000000000000000000000000000000000000000000081526001600160a01b03928316939093141593507f0000000000000000000000000000000000000000000000000000000000000000909116916340a7bb109161135c9161ffff909116903090879087908d908d90600401614453565b6040805180830381865afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c91906144a7565b935093505050935093915050565b6113b26127b3565b6001600160a01b0381166114135760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604482015261737360f01b6064820152608401610aaa565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fe390bcec6614d6b1f8ae47a4d9d46531ce328e3d293ecd6ddd015cb01eff030090602001610ae4565b3330146114e35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a41707000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6115598686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612bcb92505050565b505050505050565b6115696127b3565b600c8054821515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff9091161790556040517f5362d4bd13945e8d116b90d83a7050fa61ceb02bb79bfae783377adb46916d9490610ae490831515815260200190565b6115d96127b3565b565b600160205260009081526040902080546115f49061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546116209061429c565b801561166d5780601f106116425761010080835404028352916020019161166d565b820191906000526020600020905b81548152906001019060200180831161165057829003601f168201915b505050505081565b600c548690600160a81b900460ff161580156116aa57506001600160a01b0381166000908152600a602052604090205460ff16155b6116f65760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b6002600554036117485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aaa565b60026005556001600160a01b03871660009081526009602052604090205460ff166117c15760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726044820152621d195960ea1b6064820152608401610aaa565b6117cb8786612f64565b94506117d8873387612f82565b945060006117e68887613087565b905060008167ffffffffffffffff16116118685760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e4272696467653a20616d6f756e745344206d75737420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0388166000908152600860205260408120805483929061189a90849067ffffffffffffffff166144cb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506118cf88888388888834613106565b86336001600160a01b0316896001600160a01b03167fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58678960405161191591815260200190565b60405180910390a450506001600555505050505050565b6119346127b3565b61194282826103d485611bd7565b6001600160a01b038216600090815260086020526040902054611972908390839067ffffffffffffffff16611976565b5050565b61197e6127b3565b600c54600160b01b900460ff1680156119995750600d544210155b611a0b5760405162461bcd60e51b815260206004820152602660248201527f546f6b656e4272696467653a20656d657267656e63792077697468647261772060448201527f6c6f636b656400000000000000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b03831660009081526008602052604081208054839290611a3d90849067ffffffffffffffff166144f7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000611a6f84836131e5565b9050611a856001600160a01b0385168483612a63565b604080516001600160a01b038581168252602082018490528616917f49507695f37b729944475cf3388760a14760fef784b7ab5ca8863a5f3f8be6bd9101611098565b61ffff8116600090815260016020526040812080546060929190611aeb9061429c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b179061429c565b8015611b645780601f10611b3957610100808354040283529160200191611b64565b820191906000526020600020905b815481529060010190602001808311611b4757829003601f168201915b505050505090508051600003611bbc5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610aaa565b6111dd600060148351611bcf9190614520565b839190613212565b6001600160a01b0381166000908152600860205260408120548190611c0790849067ffffffffffffffff166131e5565b6040516370a0823160e01b815230600482015290915081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c749190614537565b6111dd9190614520565b611c866127b3565b818130604051602001611c9b93929190614550565b60408051601f1981840301815291815261ffff8516600090815260016020522090611cc690826145bc565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611cfa93929190614435565b60405180910390a1505050565b611d0f6127b3565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ae4565b611d726127b3565b6006805461ffff191661ffff83169081179091556040519081527f6a9ea26cc7efedf0df6fd048e06f3de4be1a978bb5d440277147c76e1c0eb75a90602001610ae4565b600c546001600160a01b03811690600160a81b900460ff16158015611df457506001600160a01b0381166000908152600a602052604090205460ff16155b611e405760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b600260055403611e925760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aaa565b6002600555600c546001600160a01b03168015801590611eca57506001600160a01b03811660009081526009602052604090205460ff165b611f205760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20455448206973206e6f7420737570706f7274656044820152601960fa1b6064820152608401610aaa565b611f2a8187612f64565b955060008611611fa25760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a20616d6f756e74206d757374206265206772656160448201527f746572207468616e2030000000000000000000000000000000000000000000006064820152608401610aaa565b85341015611ff25760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610aaa565b806001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561202d57600080fd5b505af1158015612041573d6000803e3d6000fd5b505050505060006120528288613087565b6001600160a01b03831660009081526008602052604081208054929350839290919061208990849067ffffffffffffffff166144cb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506120c98289838989898d346120c49190614520565b613106565b604051878152889033906000907fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a586790602001611915565b6121086127b3565b6001600160a01b0382166000818152600a6020908152604091829020805460ff19168515159081179091558251938452908301527fb1656bd3b50ddb6b12ef259c86e9cb359952b53c4403cfb5a83e23c515a35e229101610fd4565b61216c6127b3565b6040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906121d9908890889088908890889060040161467c565b600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b505050505050505050565b61ffff8616600090815260046020526040808220905161223590889088906142d0565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806122d05760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f61676500000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b8083836040516122e19291906142d0565b6040518091039020146123405760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610aaa565b61ffff8716600090815260046020526040808220905161236390899089906142d0565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f880182900482028301820190528682526123fc918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612bcb92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516124339594939291906146aa565b60405180910390a150505050505050565b61244c6127b3565b600c80547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b831515021790558061248a576000612497565b6124974262093a806146e6565b600d81905560408051831515815260208101929092527f27a37fc51e6c5d14309bbed3a54787c8788223b5d9cd5fe10605661665dd84159101610ae4565b6124dd6127b3565b6000811161252d5760405162461bcd60e51b815260206004820152601560248201527f4c7a4170703a20696e76616c6964206d696e47617300000000000000000000006044820152606401610aaa565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611cfa565b6125976127b3565b600c8054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490610ae490831515815260200190565b6126076127b3565b61ffff831660009081526001602052604090206126258284836146fe565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611cfa93929190614435565b6126616127b3565b6001600160a01b0381166126dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aaa565b6126e68161333a565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127aa91908101906147be565b95945050505050565b6000546001600160a01b031633146115d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aaa565b6000806128885a60966366ad5c8a60e01b89898989604051602401612835949392919061482c565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915230929190613397565b9150915081611559578280519060200120600460008861ffff1661ffff168152602001908152602001600020866040516128c2919061486b565b90815260408051918290036020908101832067ffffffffffffffff89166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906129209088908890889088908790614887565b60405180910390a1505050505050565b60408051600481526024810182526020810180516001600160e01b03167f313ce567000000000000000000000000000000000000000000000000000000001790529051600091829182916001600160a01b0386169161298f919061486b565b600060405180830381855afa9150503d80600081146129ca576040519150601f19603f3d011682016040523d82523d6000602084013e6129cf565b606091505b509150915081612a475760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4272696467653a206661696c656420746f2067657420746f6b656e60448201527f20646563696d616c7300000000000000000000000000000000000000000000006064820152608401610aaa565b80806020019051810190612a5b91906148e6565b949350505050565b6040516001600160a01b038316602482015260448101829052612af79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613422565b505050565b600c54600160a01b900460ff1615612b57576006546119729061ffff16600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613507915050565b80156119725760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a205f61646170746572506172616d73206d75737460448201527f20626520656d7074792e000000000000000000000000000000000000000000006064820152608401610aaa565b60065461ffff858116911614612c485760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a20696e76616c696420736f75726365206368616960448201527f6e206964000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b600080600080612c57856135e6565b600c5493975091955093509150600160a81b900460ff16158015612c9457506001600160a01b0384166000908152600a602052604090205460ff16155b612ce05760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b6001600160a01b03841660009081526009602052604090205460ff16612d545760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726044820152621d195960ea1b6064820152608401610aaa565b6001600160a01b03841660009081526008602052604090205467ffffffffffffffff908116908316811015612df15760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e73756666696369656e74206c697175696460448201527f69747900000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b612dfb83826144f7565b6001600160a01b0386166000908152600860205260408120805467ffffffffffffffff191667ffffffffffffffff9390931692909217909155612e3e86856131e5565b9050600060075411612e5257806000612e5b565b612e5b8161373a565b50600c549091506001600160a01b038781169116148015612e795750825b15612edb57600c54612e95906001600160a01b0316868361376b565b6040518181526001600160a01b038616906000907ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca9060200160405180910390a3612f58565b6001600160a01b03851615612ef05784612ef4565b61dead5b9450612f0a6001600160a01b0387168683612a63565b846001600160a01b0316866001600160a01b03167ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca83604051612f4f91815260200190565b60405180910390a35b50505050505050505050565b6000612f7983612f748585613087565b6131e5565b90505b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015612fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fef9190614537565b90506130066001600160a01b03861685308661381a565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801561304d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130719190614537565b905061307d8282614520565b9695505050505050565b6001600160a01b0382166000908152600b602052604081205481906130ac908461491f565b905067ffffffffffffffff811115612f795760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a20616d6f756e745344206f766572666c6f7700006044820152606401610aaa565b6131108383612afc565b604080516000602082018190526001600160a01b038a1660218301526041820189905260c088901b7fffffffffffffffff0000000000000000000000000000000000000000000000001660618301528251808303604901815260699092019092526006549091506131db9061ffff168261318d6020890189613d6d565b61319d60408a0160208b01613d6d565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061386b915050565b5050505050505050565b6001600160a01b0382166000908152600b6020526040812054612f799067ffffffffffffffff8416614941565b60608161322081601f6146e6565b101561326e5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610aaa565b61327882846146e6565b845110156132c85760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610aaa565b6060821580156132e75760405191506000825260208201604052613331565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613320578051835260209283019201613308565b5050858452601f01601f1916604052505b50949350505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000606060008060008661ffff1667ffffffffffffffff8111156133bd576133bd613e71565b6040519080825280601f01601f1916602001820160405280156133e7576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115613409578692505b828152826000602083013e909890975095505050505050565b6000613477826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a2c9092919063ffffffff16565b805190915015612af757808060200190518101906134959190614960565b612af75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aaa565b600061351283613a3b565b61ffff8087166000908152600260209081526040808320938916835292905290812054919250906135449084906146e6565b9050600081116135965760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610aaa565b808210156115595760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610aaa565b6000806000808451604a146136635760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e76616c6964207061796c6f6164206c656e60448201527f67746800000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6000856000815181106136785761367861497d565b016020015160f81c600181111561369157613691614909565b905060018160018111156136a7576136a7614909565b146136f45760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a20756e6b6e6f776e207061636b657420747970656044820152606401610aaa565b6021860151945060418601519350604986015192508560498151811061371c5761371c61497d565b602001015160f81c60f81b60f81c60ff166001149150509193509193565b6000806127106007548461374e9190614941565b613758919061491f565b90506137648184614520565b9150915091565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b1580156137c657600080fd5b505af11580156137da573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f19350505050158015613814573d6000803e3d6000fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526138149085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612aa8565b61ffff8616600090815260016020526040812080546138899061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546138b59061429c565b80156139025780601f106138d757610100808354040283529160200191613902565b820191906000526020600020905b8154815290600101906020018083116138e557829003601f168201915b5050505050905080516000036139805760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201527f61207472757374656420736f75726365000000000000000000000000000000006064820152608401610aaa565b6040517fc58031000000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906139f1908b9086908c908c908c908c90600401614993565b6000604051808303818588803b158015613a0a57600080fd5b505af1158015613a1e573d6000803e3d6000fd5b505050505050505050505050565b6060612a5b8484600085613a97565b6000602282511015613a8f5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610aaa565b506022015190565b606082471015613b0f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0385163b613b665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aaa565b600080866001600160a01b03168587604051613b82919061486b565b60006040518083038185875af1925050503d8060008114613bbf576040519150601f19603f3d011682016040523d82523d6000602084013e613bc4565b606091505b5091509150613bd4828286613bdf565b979650505050505050565b60608315613bee5750816111dd565b825115613bfe5782518084602001fd5b8160405162461bcd60e51b8152600401610aaa9190614004565b600060208284031215613c2a57600080fd5b5035919050565b803561ffff81168114613c4357600080fd5b919050565b60008083601f840112613c5a57600080fd5b50813567ffffffffffffffff811115613c7257600080fd5b602083019150836020828501011115613c8a57600080fd5b9250929050565b803567ffffffffffffffff81168114613c4357600080fd5b60008060008060008060808789031215613cc257600080fd5b613ccb87613c31565b9550602087013567ffffffffffffffff80821115613ce857600080fd5b613cf48a838b01613c48565b9097509550859150613d0860408a01613c91565b94506060890135915080821115613d1e57600080fd5b50613d2b89828a01613c48565b979a9699509497509295939492505050565b600060208284031215613d4f57600080fd5b612f7982613c31565b6001600160a01b03811681146126e657600080fd5b600060208284031215613d7f57600080fd5b8135612f7981613d58565b600080600060608486031215613d9f57600080fd5b8335613daa81613d58565b92506020840135613dba81613d58565b929592945050506040919091013590565b600080600060408486031215613de057600080fd5b613de984613c31565b9250602084013567ffffffffffffffff811115613e0557600080fd5b613e1186828701613c48565b9497909650939450505050565b600060408284031215613e3057600080fd5b50919050565b600080600060608486031215613e4b57600080fd5b613e558585613e1e565b9250604084013567ffffffffffffffff811115613e0557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613eb057613eb0613e71565b604052919050565b600067ffffffffffffffff821115613ed257613ed2613e71565b50601f01601f191660200190565b600080600060608486031215613ef557600080fd5b613efe84613c31565b9250602084013567ffffffffffffffff811115613f1a57600080fd5b8401601f81018613613f2b57600080fd5b8035613f3e613f3982613eb8565b613e87565b818152876020838501011115613f5357600080fd5b81602084016020830137600060208383010152809450505050613f7860408501613c91565b90509250925092565b80151581146126e657600080fd5b600060208284031215613fa157600080fd5b8135612f7981613f81565b60005b83811015613fc7578181015183820152602001613faf565b838111156138145750506000910152565b60008151808452613ff0816020860160208601613fac565b601f01601f19169290920160200192915050565b602081526000612f796020830184613fd8565b60008060008060008060c0878903121561403057600080fd5b863561403b81613d58565b955060208701359450604087013593506140588860608901613e1e565b925060a087013567ffffffffffffffff81111561407457600080fd5b613d2b89828a01613c48565b6000806040838503121561409357600080fd5b61409c83613c31565b91506140aa60208401613c31565b90509250929050565b600080604083850312156140c657600080fd5b82356140d181613d58565b915060208301356140e181613d58565b809150509250929050565b60008060006060848603121561410157600080fd5b833561410c81613d58565b9250602084013561411c81613d58565b9150613f7860408501613c91565b600080600080600060a0868803121561414257600080fd5b853594506020860135935061415a8760408801613e1e565b9250608086013567ffffffffffffffff81111561417657600080fd5b61418288828901613c48565b969995985093965092949392505050565b600080604083850312156141a657600080fd5b82356141b181613d58565b915060208301356140e181613f81565b6000806000806000608086880312156141d957600080fd5b6141e286613c31565b94506141f060208701613c31565b935060408601359250606086013567ffffffffffffffff81111561417657600080fd5b60008060006060848603121561422857600080fd5b61423184613c31565b925061423f60208501613c31565b9150604084013590509250925092565b6000806000806080858703121561426557600080fd5b61426e85613c31565b935061427c60208601613c31565b9250604085013561428c81613d58565b9396929550929360600135925050565b600181811c908216806142b057607f821691505b602082108103613e3057634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015614310576143106142e0565b90039392505050565b600181815b8085111561435457816000190482111561433a5761433a6142e0565b8085161561434757918102915b93841c939080029061431e565b509250929050565b60008261436b57506001612f7c565b8161437857506000612f7c565b816001811461438e5760028114614398576143b4565b6001915050612f7c565b60ff8411156143a9576143a96142e0565b50506001821b612f7c565b5060208310610133831016604e8410600b84101617156143d7575081810a612f7c565b6143e18383614319565b80600019048211156143f5576143f56142e0565b029392505050565b6000612f7960ff84168361435c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006127aa60408301848661440c565b61ffff871681526001600160a01b038616602082015260a06040820152600061447f60a0830187613fd8565b8515156060840152828103608084015261449a81858761440c565b9998505050505050505050565b600080604083850312156144ba57600080fd5b505080516020909101519092909150565b600067ffffffffffffffff8083168185168083038211156144ee576144ee6142e0565b01949350505050565b600067ffffffffffffffff83811690831681811015614518576145186142e0565b039392505050565b600082821015614532576145326142e0565b500390565b60006020828403121561454957600080fd5b5051919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f821115612af757600081815260208120601f850160051c8101602086101561459d5750805b601f850160051c820191505b81811015611559578281556001016145a9565b815167ffffffffffffffff8111156145d6576145d6613e71565b6145ea816145e4845461429c565b84614576565b602080601f83116001811461461f57600084156146075750858301515b600019600386901b1c1916600185901b178555611559565b600085815260208120601f198616915b8281101561464e5788860151825594840194600190910190840161462f565b508582101561466c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152613bd460808301848661440c565b61ffff861681526080602082015260006146c860808301868861440c565b67ffffffffffffffff94909416604083015250606001529392505050565b600082198211156146f9576146f96142e0565b500190565b67ffffffffffffffff83111561471657614716613e71565b61472a83614724835461429c565b83614576565b6000601f84116001811461475e57600085156147465750838201355b600019600387901b1c1916600186901b178355610dcd565b600083815260209020601f19861690835b8281101561478f578685013582556020948501946001909201910161476f565b50868210156147ac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156147d057600080fd5b815167ffffffffffffffff8111156147e757600080fd5b8201601f810184136147f857600080fd5b8051614806613f3982613eb8565b81815285602083850101111561481b57600080fd5b6127aa826020830160208601613fac565b61ffff851681526080602082015260006148496080830186613fd8565b67ffffffffffffffff851660408401528281036060840152613bd48185613fd8565b6000825161487d818460208701613fac565b9190910192915050565b61ffff8616815260a0602082015260006148a460a0830187613fd8565b67ffffffffffffffff8616604084015282810360608401526148c68186613fd8565b905082810360808401526148da8185613fd8565b98975050505050505050565b6000602082840312156148f857600080fd5b815160ff81168114612f7957600080fd5b634e487b7160e01b600052602160045260246000fd5b60008261493c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561495b5761495b6142e0565b500290565b60006020828403121561497257600080fd5b8151612f7981613f81565b634e487b7160e01b600052603260045260246000fd5b61ffff8716815260c0602082015260006149b060c0830188613fd8565b82810360408401526149c28188613fd8565b6001600160a01b0387811660608601528616608085015283810360a0850152905061449a8185613fd856fea26469706673582212207e627899a6ccdd0f8de8e25cd4ab72f6102844709371ea2bdb3c25b0c444336f64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061032b5760003560e01c806393f26a4c116101a5578063cb8d3b1f116100ec578063e3179c3e11610095578063ed629c5c1161006f578063ed629c5c146109c3578063ee7a4596146109e4578063f2fde38b14610a14578063f5ecbdbc14610a3457600080fd5b8063e3179c3e14610933578063eab45d9c14610983578063eb8d72b7146109a357600080fd5b8063d71e409e116100c6578063d71e409e146108dd578063de9b9488146108fd578063df2a5b3b1461091357600080fd5b8063cb8d3b1f1461088a578063cbed8b9c146108aa578063d1deba1f146108ca57600080fd5b8063a6c3d1651161014e578063baf3292d11610128578063baf3292d14610837578063c21f511414610857578063ca23bb4c1461087757600080fd5b8063a6c3d165146107cd578063abe685cd146107ed578063b353aaa71461080357600080fd5b8063971679641161017f57806397167964146107665780639f38369a1461078d578063a2f27ae0146107ad57600080fd5b806393f26a4c14610706578063950c8a741461072657806395e2c1681461074657600080fd5b80635747e69f1161027457806369a6b3db1161021d57806376a9099a116101f757806376a9099a146106705780638cfd8f5c146106835780638da5cb5b146106bb57806392cc13c5146106d957600080fd5b806369a6b3db1461060e578063715018a61461062e5780637533d7881461064357600080fd5b806361a552dc1161024e57806361a552dc1461059d57806366ad5c8a146105be57806368c4ac26146105de57600080fd5b80635747e69f1461050d5780635b769f3c1461052e5780635b8c41e61461054e57600080fd5b806325a9f792116102d65780633fc8cef3116102b05780633fc8cef31461048057806342d65a8d146104b8578063468b9668146104d857600080fd5b806325a9f792146103f95780632db88ecf146104225780633d8b38f61461045057600080fd5b806309824a801161030757806309824a80146103995780631095b6d7146103b957806310ddb137146103d957600080fd5b80620d5900146103375780621d35671461035957806307e0db171461037957600080fd5b3661033257005b600080fd5b34801561034357600080fd5b50610357610352366004613c18565b610a54565b005b34801561036557600080fd5b50610357610374366004613ca9565b610aef565b34801561038557600080fd5b50610357610394366004613d3d565b610d32565b3480156103a557600080fd5b506103576103b4366004613d6d565b610dd4565b3480156103c557600080fd5b506103576103d4366004613d8a565b610fe0565b3480156103e557600080fd5b506103576103f4366004613d3d565b6110a6565b34801561040557600080fd5b5061040f60075481565b6040519081526020015b60405180910390f35b34801561042e57600080fd5b5060065461043d9061ffff1681565b60405161ffff9091168152602001610419565b34801561045c57600080fd5b5061047061046b366004613dcb565b611117565b6040519015158152602001610419565b34801561048c57600080fd5b50600c546104a0906001600160a01b031681565b6040516001600160a01b039091168152602001610419565b3480156104c457600080fd5b506103576104d3366004613dcb565b6111e4565b3480156104e457600080fd5b506104f86104f3366004613e36565b611283565b60408051928352602083019190915201610419565b34801561051957600080fd5b50600c5461047090600160b01b900460ff1681565b34801561053a57600080fd5b50610357610549366004613d6d565b6113aa565b34801561055a57600080fd5b5061040f610569366004613ee0565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156105a957600080fd5b50600c5461047090600160a81b900460ff1681565b3480156105ca57600080fd5b506103576105d9366004613ca9565b61146e565b3480156105ea57600080fd5b506104706105f9366004613d6d565b60096020526000908152604090205460ff1681565b34801561061a57600080fd5b50610357610629366004613f8f565b611561565b34801561063a57600080fd5b506103576115d1565b34801561064f57600080fd5b5061066361065e366004613d3d565b6115db565b6040516104199190614004565b61035761067e366004614017565b611675565b34801561068f57600080fd5b5061040f61069e366004614080565b600260209081526000928352604080842090915290825290205481565b3480156106c757600080fd5b506000546001600160a01b03166104a0565b3480156106e557600080fd5b5061040f6106f4366004613d6d565b600b6020526000908152604090205481565b34801561071257600080fd5b506103576107213660046140b3565b61192c565b34801561073257600080fd5b506003546104a0906001600160a01b031681565b34801561075257600080fd5b506103576107613660046140ec565b611976565b34801561077257600080fd5b5061077b600681565b60405160ff9091168152602001610419565b34801561079957600080fd5b506106636107a8366004613d3d565b611ac8565b3480156107b957600080fd5b5061040f6107c8366004613d6d565b611bd7565b3480156107d957600080fd5b506103576107e8366004613dcb565b611c7e565b3480156107f957600080fd5b5061040f61271081565b34801561080f57600080fd5b506104a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561084357600080fd5b50610357610852366004613d6d565b611d07565b34801561086357600080fd5b50610357610872366004613d3d565b611d6a565b61035761088536600461412a565b611db6565b34801561089657600080fd5b506103576108a5366004614193565b612100565b3480156108b657600080fd5b506103576108c53660046141c1565b612164565b6103576108d8366004613ca9565b612212565b3480156108e957600080fd5b506103576108f8366004613f8f565b612444565b34801561090957600080fd5b5061040f600d5481565b34801561091f57600080fd5b5061035761092e366004614213565b6124d5565b34801561093f57600080fd5b5061096a61094e366004613d6d565b60086020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610419565b34801561098f57600080fd5b5061035761099e366004613f8f565b61258f565b3480156109af57600080fd5b506103576109be366004613dcb565b6125ff565b3480156109cf57600080fd5b50600c5461047090600160a01b900460ff1681565b3480156109f057600080fd5b506104706109ff366004613d6d565b600a6020526000908152604090205460ff1681565b348015610a2057600080fd5b50610357610a2f366004613d6d565b612659565b348015610a4057600080fd5b50610663610a4f36600461424f565b6126e9565b610a5c6127b3565b612710811115610ab35760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a2062726964676520666565203e2031303025000060448201526064015b60405180910390fd5b60078190556040518181527f9a749c8193bfd56b2b2a05c0bd18fbb0f69801a3fd6576c40b90537fd0fc3854906020015b60405180910390a150565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b675760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c657200006044820152606401610aaa565b61ffff861660009081526001602052604081208054610b859061429c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb19061429c565b8015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b50505050509050805186869050148015610c19575060008151115b8015610c41575080516020820120604051610c3790889088906142d0565b6040518091039020145b610cb35760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610aaa565b610d298787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061280d92505050565b50505050505050565b610d3a6127b3565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610db957600080fd5b505af1158015610dcd573d6000803e3d6000fd5b5050505050565b610ddc6127b3565b6001600160a01b038116610e3d5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604482015261737360f01b6064820152608401610aaa565b6001600160a01b03811660009081526009602052604090205460ff1615610ecc5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4272696467653a20746f6b656e20616c726561647920726567697360448201527f74657265640000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6000610ed782612930565b9050600660ff82161015610f535760405162461bcd60e51b815260206004820152603060248201527f546f6b656e4272696467653a20646563696d616c73206d757374206265203e3d60448201527f205348415245445f444543494d414c53000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0382166000908152600960205260409020805460ff19166001179055610f816006826142f6565b610f8c90600a6143fd565b6001600160a01b0383166000818152600b602090815260409182902093909355519081527ff7fe8023cb2e36bde1d59a88ac5763a8c11be6d25e6819f71bb7e23e5bf0dc1691015b60405180910390a15050565b610fe86127b3565b6000610ff384611bd7565b9050808211156110455760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610aaa565b6110596001600160a01b0385168484612a63565b604080516001600160a01b038581168252602082018590528616917ff15a0a3784dea9b4fe33bc98e2450745e262d310237b2868ea8ef56967ff3ecb91015b60405180910390a250505050565b6110ae6127b3565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610d9f565b61ffff8316600090815260016020526040812080548291906111389061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546111649061429c565b80156111b15780601f10611186576101008083540402835291602001916111b1565b820191906000526020600020905b81548152906001019060200180831161119457829003601f168201915b5050505050905083836040516111c89291906142d0565b60405180910390208180519060200120149150505b9392505050565b6111ec6127b3565b6040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d9061125590869086908690600401614435565b600060405180830381600087803b15801561126f57600080fd5b505af1158015610d29573d6000803e3d6000fd5b6000806112908484612afc565b6040805160006020820181905260218201819052604182018190526061820181905282518083036049018152606990920190925290506000806112d96040890160208a01613d6d565b6006546040517f40a7bb100000000000000000000000000000000000000000000000000000000081526001600160a01b03928316939093141593507f0000000000000000000000000000000000000000000000000000000000000000909116916340a7bb109161135c9161ffff909116903090879087908d908d90600401614453565b6040805180830381865afa158015611378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139c91906144a7565b935093505050935093915050565b6113b26127b3565b6001600160a01b0381166114135760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4272696467653a20696e76616c696420746f6b656e206164647265604482015261737360f01b6064820152608401610aaa565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fe390bcec6614d6b1f8ae47a4d9d46531ce328e3d293ecd6ddd015cb01eff030090602001610ae4565b3330146114e35760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a41707000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6115598686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250612bcb92505050565b505050505050565b6115696127b3565b600c8054821515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff9091161790556040517f5362d4bd13945e8d116b90d83a7050fa61ceb02bb79bfae783377adb46916d9490610ae490831515815260200190565b6115d96127b3565b565b600160205260009081526040902080546115f49061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546116209061429c565b801561166d5780601f106116425761010080835404028352916020019161166d565b820191906000526020600020905b81548152906001019060200180831161165057829003601f168201915b505050505081565b600c548690600160a81b900460ff161580156116aa57506001600160a01b0381166000908152600a602052604090205460ff16155b6116f65760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b6002600554036117485760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aaa565b60026005556001600160a01b03871660009081526009602052604090205460ff166117c15760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726044820152621d195960ea1b6064820152608401610aaa565b6117cb8786612f64565b94506117d8873387612f82565b945060006117e68887613087565b905060008167ffffffffffffffff16116118685760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e4272696467653a20616d6f756e745344206d75737420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0388166000908152600860205260408120805483929061189a90849067ffffffffffffffff166144cb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506118cf88888388888834613106565b86336001600160a01b0316896001600160a01b03167fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a58678960405161191591815260200190565b60405180910390a450506001600555505050505050565b6119346127b3565b61194282826103d485611bd7565b6001600160a01b038216600090815260086020526040902054611972908390839067ffffffffffffffff16611976565b5050565b61197e6127b3565b600c54600160b01b900460ff1680156119995750600d544210155b611a0b5760405162461bcd60e51b815260206004820152602660248201527f546f6b656e4272696467653a20656d657267656e63792077697468647261772060448201527f6c6f636b656400000000000000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b03831660009081526008602052604081208054839290611a3d90849067ffffffffffffffff166144f7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000611a6f84836131e5565b9050611a856001600160a01b0385168483612a63565b604080516001600160a01b038581168252602082018490528616917f49507695f37b729944475cf3388760a14760fef784b7ab5ca8863a5f3f8be6bd9101611098565b61ffff8116600090815260016020526040812080546060929190611aeb9061429c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b179061429c565b8015611b645780601f10611b3957610100808354040283529160200191611b64565b820191906000526020600020905b815481529060010190602001808311611b4757829003601f168201915b505050505090508051600003611bbc5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f72640000006044820152606401610aaa565b6111dd600060148351611bcf9190614520565b839190613212565b6001600160a01b0381166000908152600860205260408120548190611c0790849067ffffffffffffffff166131e5565b6040516370a0823160e01b815230600482015290915081906001600160a01b038516906370a0823190602401602060405180830381865afa158015611c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c749190614537565b6111dd9190614520565b611c866127b3565b818130604051602001611c9b93929190614550565b60408051601f1981840301815291815261ffff8516600090815260016020522090611cc690826145bc565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051611cfa93929190614435565b60405180910390a1505050565b611d0f6127b3565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ae4565b611d726127b3565b6006805461ffff191661ffff83169081179091556040519081527f6a9ea26cc7efedf0df6fd048e06f3de4be1a978bb5d440277147c76e1c0eb75a90602001610ae4565b600c546001600160a01b03811690600160a81b900460ff16158015611df457506001600160a01b0381166000908152600a602052604090205460ff16155b611e405760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b600260055403611e925760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aaa565b6002600555600c546001600160a01b03168015801590611eca57506001600160a01b03811660009081526009602052604090205460ff165b611f205760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4272696467653a20455448206973206e6f7420737570706f7274656044820152601960fa1b6064820152608401610aaa565b611f2a8187612f64565b955060008611611fa25760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a20616d6f756e74206d757374206265206772656160448201527f746572207468616e2030000000000000000000000000000000000000000000006064820152608401610aaa565b85341015611ff25760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4272696467653a20666565206e6f7420656e6f75676800000000006044820152606401610aaa565b806001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b15801561202d57600080fd5b505af1158015612041573d6000803e3d6000fd5b505050505060006120528288613087565b6001600160a01b03831660009081526008602052604081208054929350839290919061208990849067ffffffffffffffff166144cb565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506120c98289838989898d346120c49190614520565b613106565b604051878152889033906000907fbe6ff12fec5087498d44bc85f1a83235a630944a1e2d5a7938afe810370a586790602001611915565b6121086127b3565b6001600160a01b0382166000818152600a6020908152604091829020805460ff19168515159081179091558251938452908301527fb1656bd3b50ddb6b12ef259c86e9cb359952b53c4403cfb5a83e23c515a35e229101610fd4565b61216c6127b3565b6040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906121d9908890889088908890889060040161467c565b600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b505050505050505050565b61ffff8616600090815260046020526040808220905161223590889088906142d0565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806122d05760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f61676500000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b8083836040516122e19291906142d0565b6040518091039020146123405760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610aaa565b61ffff8716600090815260046020526040808220905161236390899089906142d0565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f880182900482028301820190528682526123fc918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250612bcb92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516124339594939291906146aa565b60405180910390a150505050505050565b61244c6127b3565b600c80547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b831515021790558061248a576000612497565b6124974262093a806146e6565b600d81905560408051831515815260208101929092527f27a37fc51e6c5d14309bbed3a54787c8788223b5d9cd5fe10605661665dd84159101610ae4565b6124dd6127b3565b6000811161252d5760405162461bcd60e51b815260206004820152601560248201527f4c7a4170703a20696e76616c6964206d696e47617300000000000000000000006044820152606401610aaa565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001611cfa565b6125976127b3565b600c8054821515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490610ae490831515815260200190565b6126076127b3565b61ffff831660009081526001602052604090206126258284836146fe565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611cfa93929190614435565b6126616127b3565b6001600160a01b0381166126dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aaa565b6126e68161333a565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127aa91908101906147be565b95945050505050565b6000546001600160a01b031633146115d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aaa565b6000806128885a60966366ad5c8a60e01b89898989604051602401612835949392919061482c565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915230929190613397565b9150915081611559578280519060200120600460008861ffff1661ffff168152602001908152602001600020866040516128c2919061486b565b90815260408051918290036020908101832067ffffffffffffffff89166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c906129209088908890889088908790614887565b60405180910390a1505050505050565b60408051600481526024810182526020810180516001600160e01b03167f313ce567000000000000000000000000000000000000000000000000000000001790529051600091829182916001600160a01b0386169161298f919061486b565b600060405180830381855afa9150503d80600081146129ca576040519150601f19603f3d011682016040523d82523d6000602084013e6129cf565b606091505b509150915081612a475760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4272696467653a206661696c656420746f2067657420746f6b656e60448201527f20646563696d616c7300000000000000000000000000000000000000000000006064820152608401610aaa565b80806020019051810190612a5b91906148e6565b949350505050565b6040516001600160a01b038316602482015260448101829052612af79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613422565b505050565b600c54600160a01b900460ff1615612b57576006546119729061ffff16600084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613507915050565b80156119725760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4272696467653a205f61646170746572506172616d73206d75737460448201527f20626520656d7074792e000000000000000000000000000000000000000000006064820152608401610aaa565b60065461ffff858116911614612c485760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4272696467653a20696e76616c696420736f75726365206368616960448201527f6e206964000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b600080600080612c57856135e6565b600c5493975091955093509150600160a81b900460ff16158015612c9457506001600160a01b0384166000908152600a602052604090205460ff16155b612ce05760405162461bcd60e51b815260206004820152601360248201527f546f6b656e4272696467653a20706175736564000000000000000000000000006044820152606401610aaa565b6001600160a01b03841660009081526009602052604090205460ff16612d545760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20746f6b656e206973206e6f7420737570706f726044820152621d195960ea1b6064820152608401610aaa565b6001600160a01b03841660009081526008602052604090205467ffffffffffffffff908116908316811015612df15760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e73756666696369656e74206c697175696460448201527f69747900000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b612dfb83826144f7565b6001600160a01b0386166000908152600860205260408120805467ffffffffffffffff191667ffffffffffffffff9390931692909217909155612e3e86856131e5565b9050600060075411612e5257806000612e5b565b612e5b8161373a565b50600c549091506001600160a01b038781169116148015612e795750825b15612edb57600c54612e95906001600160a01b0316868361376b565b6040518181526001600160a01b038616906000907ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca9060200160405180910390a3612f58565b6001600160a01b03851615612ef05784612ef4565b61dead5b9450612f0a6001600160a01b0387168683612a63565b846001600160a01b0316866001600160a01b03167ffd19781f43410d9594fd4c02dd1d98dbe99099cbd222d5851a6e183c468d33ca83604051612f4f91815260200190565b60405180910390a35b50505050505050505050565b6000612f7983612f748585613087565b6131e5565b90505b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015612fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fef9190614537565b90506130066001600160a01b03861685308661381a565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801561304d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130719190614537565b905061307d8282614520565b9695505050505050565b6001600160a01b0382166000908152600b602052604081205481906130ac908461491f565b905067ffffffffffffffff811115612f795760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e4272696467653a20616d6f756e745344206f766572666c6f7700006044820152606401610aaa565b6131108383612afc565b604080516000602082018190526001600160a01b038a1660218301526041820189905260c088901b7fffffffffffffffff0000000000000000000000000000000000000000000000001660618301528251808303604901815260699092019092526006549091506131db9061ffff168261318d6020890189613d6d565b61319d60408a0160208b01613d6d565b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061386b915050565b5050505050505050565b6001600160a01b0382166000908152600b6020526040812054612f799067ffffffffffffffff8416614941565b60608161322081601f6146e6565b101561326e5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610aaa565b61327882846146e6565b845110156132c85760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610aaa565b6060821580156132e75760405191506000825260208201604052613331565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613320578051835260209283019201613308565b5050858452601f01601f1916604052505b50949350505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000606060008060008661ffff1667ffffffffffffffff8111156133bd576133bd613e71565b6040519080825280601f01601f1916602001820160405280156133e7576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115613409578692505b828152826000602083013e909890975095505050505050565b6000613477826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a2c9092919063ffffffff16565b805190915015612af757808060200190518101906134959190614960565b612af75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aaa565b600061351283613a3b565b61ffff8087166000908152600260209081526040808320938916835292905290812054919250906135449084906146e6565b9050600081116135965760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f74207365740000000000006044820152606401610aaa565b808210156115595760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f7700000000006044820152606401610aaa565b6000806000808451604a146136635760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4272696467653a20696e76616c6964207061796c6f6164206c656e60448201527f67746800000000000000000000000000000000000000000000000000000000006064820152608401610aaa565b6000856000815181106136785761367861497d565b016020015160f81c600181111561369157613691614909565b905060018160018111156136a7576136a7614909565b146136f45760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4272696467653a20756e6b6e6f776e207061636b657420747970656044820152606401610aaa565b6021860151945060418601519350604986015192508560498151811061371c5761371c61497d565b602001015160f81c60f81b60f81c60ff166001149150509193509193565b6000806127106007548461374e9190614941565b613758919061491f565b90506137648184614520565b9150915091565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b1580156137c657600080fd5b505af11580156137da573d6000803e3d6000fd5b50506040516001600160a01b038516925083156108fc02915083906000818181858888f19350505050158015613814573d6000803e3d6000fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526138149085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612aa8565b61ffff8616600090815260016020526040812080546138899061429c565b80601f01602080910402602001604051908101604052809291908181526020018280546138b59061429c565b80156139025780601f106138d757610100808354040283529160200191613902565b820191906000526020600020905b8154815290600101906020018083116138e557829003601f168201915b5050505050905080516000036139805760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201527f61207472757374656420736f75726365000000000000000000000000000000006064820152608401610aaa565b6040517fc58031000000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c58031009084906139f1908b9086908c908c908c908c90600401614993565b6000604051808303818588803b158015613a0a57600080fd5b505af1158015613a1e573d6000803e3d6000fd5b505050505050505050505050565b6060612a5b8484600085613a97565b6000602282511015613a8f5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d73000000006044820152606401610aaa565b506022015190565b606082471015613b0f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610aaa565b6001600160a01b0385163b613b665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aaa565b600080866001600160a01b03168587604051613b82919061486b565b60006040518083038185875af1925050503d8060008114613bbf576040519150601f19603f3d011682016040523d82523d6000602084013e613bc4565b606091505b5091509150613bd4828286613bdf565b979650505050505050565b60608315613bee5750816111dd565b825115613bfe5782518084602001fd5b8160405162461bcd60e51b8152600401610aaa9190614004565b600060208284031215613c2a57600080fd5b5035919050565b803561ffff81168114613c4357600080fd5b919050565b60008083601f840112613c5a57600080fd5b50813567ffffffffffffffff811115613c7257600080fd5b602083019150836020828501011115613c8a57600080fd5b9250929050565b803567ffffffffffffffff81168114613c4357600080fd5b60008060008060008060808789031215613cc257600080fd5b613ccb87613c31565b9550602087013567ffffffffffffffff80821115613ce857600080fd5b613cf48a838b01613c48565b9097509550859150613d0860408a01613c91565b94506060890135915080821115613d1e57600080fd5b50613d2b89828a01613c48565b979a9699509497509295939492505050565b600060208284031215613d4f57600080fd5b612f7982613c31565b6001600160a01b03811681146126e657600080fd5b600060208284031215613d7f57600080fd5b8135612f7981613d58565b600080600060608486031215613d9f57600080fd5b8335613daa81613d58565b92506020840135613dba81613d58565b929592945050506040919091013590565b600080600060408486031215613de057600080fd5b613de984613c31565b9250602084013567ffffffffffffffff811115613e0557600080fd5b613e1186828701613c48565b9497909650939450505050565b600060408284031215613e3057600080fd5b50919050565b600080600060608486031215613e4b57600080fd5b613e558585613e1e565b9250604084013567ffffffffffffffff811115613e0557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613eb057613eb0613e71565b604052919050565b600067ffffffffffffffff821115613ed257613ed2613e71565b50601f01601f191660200190565b600080600060608486031215613ef557600080fd5b613efe84613c31565b9250602084013567ffffffffffffffff811115613f1a57600080fd5b8401601f81018613613f2b57600080fd5b8035613f3e613f3982613eb8565b613e87565b818152876020838501011115613f5357600080fd5b81602084016020830137600060208383010152809450505050613f7860408501613c91565b90509250925092565b80151581146126e657600080fd5b600060208284031215613fa157600080fd5b8135612f7981613f81565b60005b83811015613fc7578181015183820152602001613faf565b838111156138145750506000910152565b60008151808452613ff0816020860160208601613fac565b601f01601f19169290920160200192915050565b602081526000612f796020830184613fd8565b60008060008060008060c0878903121561403057600080fd5b863561403b81613d58565b955060208701359450604087013593506140588860608901613e1e565b925060a087013567ffffffffffffffff81111561407457600080fd5b613d2b89828a01613c48565b6000806040838503121561409357600080fd5b61409c83613c31565b91506140aa60208401613c31565b90509250929050565b600080604083850312156140c657600080fd5b82356140d181613d58565b915060208301356140e181613d58565b809150509250929050565b60008060006060848603121561410157600080fd5b833561410c81613d58565b9250602084013561411c81613d58565b9150613f7860408501613c91565b600080600080600060a0868803121561414257600080fd5b853594506020860135935061415a8760408801613e1e565b9250608086013567ffffffffffffffff81111561417657600080fd5b61418288828901613c48565b969995985093965092949392505050565b600080604083850312156141a657600080fd5b82356141b181613d58565b915060208301356140e181613f81565b6000806000806000608086880312156141d957600080fd5b6141e286613c31565b94506141f060208701613c31565b935060408601359250606086013567ffffffffffffffff81111561417657600080fd5b60008060006060848603121561422857600080fd5b61423184613c31565b925061423f60208501613c31565b9150604084013590509250925092565b6000806000806080858703121561426557600080fd5b61426e85613c31565b935061427c60208601613c31565b9250604085013561428c81613d58565b9396929550929360600135925050565b600181811c908216806142b057607f821691505b602082108103613e3057634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff841680821015614310576143106142e0565b90039392505050565b600181815b8085111561435457816000190482111561433a5761433a6142e0565b8085161561434757918102915b93841c939080029061431e565b509250929050565b60008261436b57506001612f7c565b8161437857506000612f7c565b816001811461438e5760028114614398576143b4565b6001915050612f7c565b60ff8411156143a9576143a96142e0565b50506001821b612f7c565b5060208310610133831016604e8410600b84101617156143d7575081810a612f7c565b6143e18383614319565b80600019048211156143f5576143f56142e0565b029392505050565b6000612f7960ff84168361435c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006127aa60408301848661440c565b61ffff871681526001600160a01b038616602082015260a06040820152600061447f60a0830187613fd8565b8515156060840152828103608084015261449a81858761440c565b9998505050505050505050565b600080604083850312156144ba57600080fd5b505080516020909101519092909150565b600067ffffffffffffffff8083168185168083038211156144ee576144ee6142e0565b01949350505050565b600067ffffffffffffffff83811690831681811015614518576145186142e0565b039392505050565b600082821015614532576145326142e0565b500390565b60006020828403121561454957600080fd5b5051919050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f821115612af757600081815260208120601f850160051c8101602086101561459d5750805b601f850160051c820191505b81811015611559578281556001016145a9565b815167ffffffffffffffff8111156145d6576145d6613e71565b6145ea816145e4845461429c565b84614576565b602080601f83116001811461461f57600084156146075750858301515b600019600386901b1c1916600185901b178555611559565b600085815260208120601f198616915b8281101561464e5788860151825594840194600190910190840161462f565b508582101561466c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152613bd460808301848661440c565b61ffff861681526080602082015260006146c860808301868861440c565b67ffffffffffffffff94909416604083015250606001529392505050565b600082198211156146f9576146f96142e0565b500190565b67ffffffffffffffff83111561471657614716613e71565b61472a83614724835461429c565b83614576565b6000601f84116001811461475e57600085156147465750838201355b600019600387901b1c1916600186901b178355610dcd565b600083815260209020601f19861690835b8281101561478f578685013582556020948501946001909201910161476f565b50868210156147ac5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156147d057600080fd5b815167ffffffffffffffff8111156147e757600080fd5b8201601f810184136147f857600080fd5b8051614806613f3982613eb8565b81815285602083850101111561481b57600080fd5b6127aa826020830160208601613fac565b61ffff851681526080602082015260006148496080830186613fd8565b67ffffffffffffffff851660408401528281036060840152613bd48185613fd8565b6000825161487d818460208701613fac565b9190910192915050565b61ffff8616815260a0602082015260006148a460a0830187613fd8565b67ffffffffffffffff8616604084015282810360608401526148c68186613fd8565b905082810360808401526148da8185613fd8565b98975050505050505050565b6000602082840312156148f857600080fd5b815160ff81168114612f7957600080fd5b634e487b7160e01b600052602160045260246000fd5b60008261493c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561495b5761495b6142e0565b500290565b60006020828403121561497257600080fd5b8151612f7981613f81565b634e487b7160e01b600052603260045260246000fd5b61ffff8716815260c0602082015260006149b060c0830188613fd8565b82810360408401526149c28188613fd8565b6001600160a01b0387811660608601528616608085015283810360a0850152905061449a8185613fd856fea26469706673582212207e627899a6ccdd0f8de8e25cd4ab72f6102844709371ea2bdb3c25b0c444336f64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1574,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 450,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 456,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 458,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "precrime",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 943,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "failedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1690,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3068,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "aptosChainId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 3070,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "bridgeFeeBP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3074,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "tvlSDs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 3078,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3082,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "pausedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3086,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "ld2sdRates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3088,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "weth",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3090,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "useCustomAdapterParams",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3092,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "globalPaused",
        "offset": 21,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3094,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "emergencyWithdrawEnabled",
        "offset": 22,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3096,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "emergencyWithdrawTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}